{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ENACOM Python bootcamp Processo completo de constru\u00e7\u00e3o e utiliza\u00e7\u00e3o de uma API (Interface de programa\u00e7\u00e3o de aplica\u00e7\u00f5es) para resolver um problema de otimiza\u00e7\u00e3o. 1. Defini\u00e7\u00e3o da API com OpenAPI Explica\u00e7\u00e3o da especifica\u00e7\u00e3o OpenAPI Para visualizar a especifica\u00e7\u00e3o como documenta\u00e7\u00e3o din\u00e2mica vamos usar o editor do swagger 2. Defini\u00e7\u00e3o das regras de neg\u00f3cio em testes de unidade com Pytest 3. Estrutura\u00e7\u00e3o dos dados iniciais em Python com Pydantic 4. Envio de dados de entrada no formato JSON com Postman 5. Uso de m\u00e9todos de otimiza\u00e7\u00e3o para resolu\u00e7\u00e3o do problema Usaremos a biblioteca desenvolvida pela ENACOM dispon\u00edvel no PyPI (The Python Package Index): science-optimization . Ela resolve problemas que apresentam a seguinte forma: Achar o valor da vari\u00e1vel de entrada x que gera o menor valor de sa\u00edda f(x) , por\u00e9m respeitando os limites g(x) <= 0 , h(x) <= 0 , para x dentro de um faixa de valores entre x_min e x_max inclusos. 6. Modelagem de um problema de otimiza\u00e7\u00e3o Problema: encontrar a aloca\u00e7\u00e3o \u00f3tima dos modelos de trens Objetivo: maximizar a quantidade de vag\u00f5es em trem. Restri\u00e7\u00f5es: disponibilidade de vag\u00f5es e locomotivas. Modelo matem\u00e1tico do problema i \u00e9 o \u00edndice do modelo de trem; w_i \u00e9 a quantidade de vag\u00f5es do modelo de trem i ; l_i \u00e9 a quantidade de locos do modelo de trem i ; W \u00e9 a disponiblilidade de vag\u00f5es; L \u00e9 a disponiblilidade de locomotivas; x_i \u00e9 a quantidade de trens alocados por modelo. Modelo computacional do problema optimization/optimizer.py \"\"\" Solver for optimization problem. \"\"\" def build_allocation_problem ( wagons : np . ndarray , locomotives : np . ndarray , total_wagons : int , total_locomotives : int , verbose : bool = True ) -> OptimizationProblem : \"\"\" Build a allocation optimization problem. Args: wagons (np.ndarray): Wagons for each train model. locomotives (np.ndarray): Locomotives for each train model. total_wagons (int): Total of available wagons. total_locomotives (int): Total of available locomotives. verbose (bool, optional): Show problem informations. Defaults to True. Raises: ValueError: Inconsistent problem when total of models is diffents for locomotives and wagons. Also inconsistent problem when or total of available wagons or locomotives are negatives. Returns: OptimizationProblem: structured optimization problem. \"\"\" ... def optimize_allocation ( problem : OptimizationProblem ) -> tuple [ ndarray , ndarray ]: \"\"\" Solver a optimization allocation problem. Args: problem (OptimizationProblem): Structured optimization problem. Returns: tuple[ndarray, ndarray]: train_models end allocation. \"\"\" ... 7. Cria\u00e7\u00e3o dos dados de sa\u00edda em Python com Pydantic 8. Recebimento dos dados de sa\u00edda no formato JSON com Postman 9. An\u00e1lise do resultado da otimiza\u00e7\u00e3o","title":"ENACOM Python bootcamp"},{"location":"#enacom-python-bootcamp","text":"Processo completo de constru\u00e7\u00e3o e utiliza\u00e7\u00e3o de uma API (Interface de programa\u00e7\u00e3o de aplica\u00e7\u00f5es) para resolver um problema de otimiza\u00e7\u00e3o.","title":"ENACOM Python bootcamp"},{"location":"#1-definicao-da-api-com-openapi","text":"Explica\u00e7\u00e3o da especifica\u00e7\u00e3o OpenAPI Para visualizar a especifica\u00e7\u00e3o como documenta\u00e7\u00e3o din\u00e2mica vamos usar o editor do swagger","title":"1. Defini\u00e7\u00e3o da API com OpenAPI"},{"location":"#2-definicao-das-regras-de-negocio-em-testes-de-unidade-com-pytest","text":"","title":"2. Defini\u00e7\u00e3o das regras de neg\u00f3cio em testes de unidade com Pytest"},{"location":"#3-estruturacao-dos-dados-iniciais-em-python-com-pydantic","text":"","title":"3. Estrutura\u00e7\u00e3o dos dados iniciais em Python com Pydantic"},{"location":"#4-envio-de-dados-de-entrada-no-formato-json-com-postman","text":"","title":"4. Envio de dados de entrada no formato JSON com Postman"},{"location":"#5-uso-de-metodos-de-otimizacao-para-resolucao-do-problema","text":"Usaremos a biblioteca desenvolvida pela ENACOM dispon\u00edvel no PyPI (The Python Package Index): science-optimization . Ela resolve problemas que apresentam a seguinte forma: Achar o valor da vari\u00e1vel de entrada x que gera o menor valor de sa\u00edda f(x) , por\u00e9m respeitando os limites g(x) <= 0 , h(x) <= 0 , para x dentro de um faixa de valores entre x_min e x_max inclusos.","title":"5. Uso de m\u00e9todos de otimiza\u00e7\u00e3o para resolu\u00e7\u00e3o do problema"},{"location":"#6-modelagem-de-um-problema-de-otimizacao","text":"","title":"6. Modelagem de um problema de otimiza\u00e7\u00e3o"},{"location":"#problema-encontrar-a-alocacao-otima-dos-modelos-de-trens","text":"Objetivo: maximizar a quantidade de vag\u00f5es em trem. Restri\u00e7\u00f5es: disponibilidade de vag\u00f5es e locomotivas.","title":"Problema: encontrar a aloca\u00e7\u00e3o \u00f3tima dos modelos de trens"},{"location":"#modelo-matematico-do-problema","text":"i \u00e9 o \u00edndice do modelo de trem; w_i \u00e9 a quantidade de vag\u00f5es do modelo de trem i ; l_i \u00e9 a quantidade de locos do modelo de trem i ; W \u00e9 a disponiblilidade de vag\u00f5es; L \u00e9 a disponiblilidade de locomotivas; x_i \u00e9 a quantidade de trens alocados por modelo.","title":"Modelo matem\u00e1tico do problema"},{"location":"#modelo-computacional-do-problema","text":"optimization/optimizer.py \"\"\" Solver for optimization problem. \"\"\" def build_allocation_problem ( wagons : np . ndarray , locomotives : np . ndarray , total_wagons : int , total_locomotives : int , verbose : bool = True ) -> OptimizationProblem : \"\"\" Build a allocation optimization problem. Args: wagons (np.ndarray): Wagons for each train model. locomotives (np.ndarray): Locomotives for each train model. total_wagons (int): Total of available wagons. total_locomotives (int): Total of available locomotives. verbose (bool, optional): Show problem informations. Defaults to True. Raises: ValueError: Inconsistent problem when total of models is diffents for locomotives and wagons. Also inconsistent problem when or total of available wagons or locomotives are negatives. Returns: OptimizationProblem: structured optimization problem. \"\"\" ... def optimize_allocation ( problem : OptimizationProblem ) -> tuple [ ndarray , ndarray ]: \"\"\" Solver a optimization allocation problem. Args: problem (OptimizationProblem): Structured optimization problem. Returns: tuple[ndarray, ndarray]: train_models end allocation. \"\"\" ...","title":"Modelo computacional do problema"},{"location":"#7-criacao-dos-dados-de-saida-em-python-com-pydantic","text":"","title":"7. Cria\u00e7\u00e3o dos dados de sa\u00edda em Python com Pydantic"},{"location":"#8-recebimento-dos-dados-de-saida-no-formato-json-com-postman","text":"","title":"8. Recebimento dos dados de sa\u00edda no formato JSON com Postman"},{"location":"#9-analise-do-resultado-da-otimizacao","text":"","title":"9. An\u00e1lise do resultado da otimiza\u00e7\u00e3o"}]}